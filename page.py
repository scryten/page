import streamlit as st
import speech_recognition as sr
from gtts import gTTS
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if "chats" not in st.session_state:
    st.session_state.chats = {"–ù–æ–≤—ã–π —á–∞—Ç": []}
    st.session_state.current_chat = "–ù–æ–≤—ã–π —á–∞—Ç"
    
if "sidebar_expanded" not in st.session_state:
    st.session_state.sidebar_expanded = True

if "renaming_chat" not in st.session_state:
    st.session_state.renaming_chat = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ö–æ–º–ø—å—é—Ç–µ–Ω–∞—Ç–æ—Ä", layout="wide")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
def recognize_speech():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        st.write("üéô –ì–æ–≤–æ—Ä–∏—Ç–µ...")
        audio = recognizer.listen(source)
    try:
        text = recognizer.recognize_google(audio, language="ru-RU")
        with open("voice_input.txt", "w", encoding="utf-8") as file:
            file.write(text)
        return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
    except sr.RequestError:
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∫–∏ –æ—Ç–≤–µ—Ç–∞
def text_to_speech(text, filename="response.mp3"):
    tts = gTTS(text=text, lang="ru")
    tts.save(filename)
    return filename


# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
st.markdown("""
    <style>
        .css-1aumxhk {display: none} /* –£–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫—É "Made with Streamlit"
    </style>
""", unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
if st.session_state.sidebar_expanded:
    with st.sidebar:
        st.title("üìÇ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤")
        #if st.button("üîΩ –°–≤–µ—Ä–Ω—É—Ç—å / –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–∞–Ω–µ–ª—å"):
        #    st.session_state.sidebar_expanded = False
        #    st.rerun()
        selected_chat = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç", list(st.session_state.chats.keys()))

        col1, col2 = st.columns([2, 1])
        if col1.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç"):
            new_chat_name = f"–ß–∞—Ç {len(st.session_state.chats)}"
            st.session_state.chats[new_chat_name] = []
            st.session_state.current_chat = new_chat_name
            st.rerun()
        if col2.button("üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç"):
            if selected_chat in st.session_state.chats:
                del st.session_state.chats[selected_chat]
                if not st.session_state.chats:
                    st.session_state.chats["–ù–æ–≤—ã–π —á–∞—Ç"] = []
                st.session_state.current_chat = list(st.session_state.chats.keys())[0]
                st.rerun()
        if col3.button("‚úè –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á–∞—Ç"):
            st.session_state.renaming_chat = selected_chat
            st.rerun()

        if st.session_state.renaming_chat:
            new_name = st.text_input("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", st.session_state.renaming_chat)
            rename_col1, rename_col2 = st.columns([1, 1])
            if rename_col1.button("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                if new_name and new_name not in st.session_state.chats:
                    st.session_state.chats[new_name] = st.session_state.chats.pop(st.session_state.renaming_chat)
                    st.session_state.current_chat = new_name
                st.session_state.renaming_chat = None
                st.rerun()
            if rename_col2.button("‚ùå –û—Ç–º–µ–Ω–∞"):
                st.session_state.renaming_chat = None
                st.rerun()

        
st.session_state.current_chat = selected_chat if st.session_state.sidebar_expanded else st.session_state.current_chat

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–ö–æ–º–ø—å—é—Ç–µ–Ω–∞—Ç–æ—Ä")

# –í—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
st.write(f"### {st.session_state.current_chat}")
chat_history = st.session_state.chats[st.session_state.current_chat]

for message in chat_history:
    with st.chat_message(message["role"]):
        st.markdown(message["text"])

# –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
if st.button("üéô –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥"):
    user_input = recognize_speech()
    st.session_state.user_input = user_input
    st.rerun()

if prompt := st.chat_input("Behold, Perry the Platopus! I'm Computenator"):
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    chat_history.append({"role": "user", "text": prompt})
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –∑–∞–≥–ª—É—à–∫—É (–±–µ–∑ –ò–ò)
    response = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω ü§ñ"
    chat_history.append({"role": "assistant", "text": response})

    # –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        audio_file = text_to_speech(response)
        st.audio(audio_file, format="audio/mp3")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    st.rerun()
